enum AccessPermission {
    PUBLIC
    PRIVATE
    INTERNAL
}

enum RepositoryPathType {
    USER
    GROUP
}

type User {
    id: ID!
    email: String!
    userName: String!
    realName: String!
    banned: Boolean!
    description: String
}

type RepositoryPath {
    name: String!
    namespace: String!
    type: RepositoryPathType!
}

type Repository {
    id: ID!
    path: RepositoryPath!
    accessPermission: AccessPermission!
    description: String
}

type AuthorizationResponse {
    user: User!
    token: String!
}

input UserInfoInput {
    email: String!
    realName: String!
    description: String
}

input AuthorizationCredentials {
    userName: String!
    password: String!
}

input RepositoryPathInput {
    name: String!
    namespace: String!
}

input CreateRepositoryInput {
    path: RepositoryPathInput!
    accessPermission: AccessPermission!
    description: String
}

type Query {
    ping: String!
    userMe: User!

    repositoriesByNamespace(namespace: String!): [Repository]!
    repositoryByPath(path: RepositoryPathInput!): Repository
}

type Mutation {
    registerUser(info: UserInfoInput, credentials: AuthorizationCredentials): AuthorizationResponse!
    authenticateUser(credentials: AuthorizationCredentials): AuthorizationResponse!

    deleteToken: Boolean!
    deleteAllTokens: Boolean!

    createRepository(input: CreateRepositoryInput): Repository!
}
